(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{219:function(e,t,n){"use strict";n.r(t);var a=n(28),s=Object(a.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h3",{attrs:{id:"flutter-基础（二）"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#flutter-基础（二）"}},[e._v("#")]),e._v(" Flutter 基础（二）")]),e._v(" "),n("h4",{attrs:{id:"_1-row"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-row"}},[e._v("#")]),e._v(" 1.Row")]),e._v(" "),n("p",[e._v("不灵水平布局")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("body: new Row(\n  children: <Widget>[\n    new RaisedButton(\n      onPressed: (){},\n      color: Colors.blueAccent,\n      child: new Text('蓝色按钮'),\n    ),\n    new RaisedButton(\n      onPressed: (){},\n      color: Colors.redAccent,\n      child: new Text('红色按钮'),\n    ),\n    new RaisedButton(\n      onPressed: (){\n        print('2424242');\n      },\n      color: Colors.greenAccent,\n      child: new Text('绿色按钮'),\n    )\n  ],\n),\n")])])]),n("p",[e._v("灵活水平布局")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Expanded (\n  child: new RaisedButton(\n    onPressed: (){},\n    color: Colors.redAccent,\n    child: new Text('红色按钮'),\n  )\n),\n")])])]),n("h4",{attrs:{id:"_2-column"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-column"}},[e._v("#")]),e._v(" 2.Column")]),e._v(" "),n("ul",[n("li",[e._v("main轴：如果你用column组件，那垂直就是主轴，如果你用Row组件，那水平就是主轴。")]),e._v(" "),n("li",[e._v("cross轴：cross轴我们称为幅轴，是和主轴垂直的方向。比如Row组件，那垂直就是幅轴，Column组件的幅轴就是水平方向的。")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("body: Container(\n  child: new Column(\n    crossAxisAlignment: CrossAxisAlignment.center,\n    mainAxisAlignment: MainAxisAlignment.center,\n    children: <Widget>[\n      new Text('这是第一行字！这是第一行字！这是第一行字！'),\n      new Text('这是第二行字！'),\n      new Text('这是第三行字！这是第三行字！这是第三行字！这是第三行字！')\n    ],\n  )\n),\n")])])]),n("ul",[n("li",[e._v("CrossAxisAlignment.star：居左对齐。")]),e._v(" "),n("li",[e._v("CrossAxisAlignment.end：居右对齐。")]),e._v(" "),n("li",[e._v("CrossAxisAlignment.center：居中对齐。")])]),e._v(" "),n("h4",{attrs:{id:"_3-stack层叠布局"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-stack层叠布局"}},[e._v("#")]),e._v(" 3.Stack层叠布局")]),e._v(" "),n("p",[e._v("层叠布局的 alignment 属性")]),e._v(" "),n("ul",[n("li",[e._v("alignment属性是控制层叠的位置的，建议在两个内容进行层叠时使用。它有两个值X轴距离和Y轴距离，值是从0到1的，都是从上层容器的左上角开始算起的")]),e._v(" "),n("li",[e._v("CircleAvatar组件的使用")]),e._v(" "),n("li",[e._v("CircleAvatar这个经常用来作头像的，组件里边有个radius的值可以设置图片的弧度。\n现在我们准备放入一个图像，然后把弧度设置成100，形成一个漂亮的圆形，代码如下：")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("new CircleAvatar(\n  backgroundImage: new NetworkImage('http://jspang.com/static//myimg/blogtouxiang.jpg'),\n  radius: 100.0,\n),\n\nvar stack = new Stack(\n  alignment: const FractionalOffset(0.5, 0.8),\n  children: <Widget>[\n    new CircleAvatar(\n      backgroundImage: new NetworkImage('https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1551696714&di=3592e7cc2af8337ba2c1c7427090491f&imgtype=jpg&er=1&src=http%3A%2F%2Fdata.whicdn.com%2Fimages%2F48087360%2Flarge.png'),\n      radius: 100.0,\n    ),\n    new Container(\n      decoration: new BoxDecoration(\n        color: Color.fromARGB(100, 255, 200, 100)\n      ),\n      child: new Text(\n        '好漂亮哦！', \n        textAlign: TextAlign.center,\n      ),\n      padding: new EdgeInsets.all(10.0)\n    )\n  ],\n);\n")])])]),n("h4",{attrs:{id:"_4-positioned组件的属性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-positioned组件的属性"}},[e._v("#")]),e._v(" 4.Positioned组件的属性")]),e._v(" "),n("ul",[n("li",[e._v("bottom: 距离层叠组件下边的距离")]),e._v(" "),n("li",[e._v("left：距离层叠组件左边的距离")]),e._v(" "),n("li",[e._v("top：距离层叠组件上边的距离")]),e._v(" "),n("li",[e._v("right：距离层叠组件右边的距离")]),e._v(" "),n("li",[e._v("width: 层叠定位组件的宽度")]),e._v(" "),n("li",[e._v("height: 层叠定位组件的高度")])]),e._v(" "),n("h4",{attrs:{id:"_5-卡片组件布局"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-卡片组件布局"}},[e._v("#")]),e._v(" 5.卡片组件布局")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("var card = new Card(\n  child: new Column(\n    children: <Widget>[\n      ListTile(\n        title: Text(\n          '北京大学', \n          style: TextStyle(\n            fontWeight: FontWeight.w500\n          ),\n        ),\n        subtitle: Text('北京市海淀区'),\n        leading: new Icon(\n          Icons.account_balance,\n          color: Colors.blueAccent\n        ),\n      ),\n    ],\n  )\n);\n")])])]),n("h4",{attrs:{id:"_6-导航和返回"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-导航和返回"}},[e._v("#")]),e._v(" 6.导航和返回")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("import 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(\n    MaterialApp(\n      title: \"导航\",\n      home: new FirstScreen(),\n    )\n  );\n}\n\nclass FirstScreen extends StatelessWidget {\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: new Text('主页'),\n      ),\n      body: Center(\n        child: RaisedButton(\n          onPressed: (){\n            Navigator.push(context, new MaterialPageRoute(\n              builder: (context)=>new SecondScreen()\n            ));\n          },\n          child: Text('详情页'),\n        ),\n      ),\n    );\n  }\n}\n\nclass SecondScreen extends StatelessWidget {\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: new Text('详情页')),\n      body: Center(\n        child: RaisedButton(\n          onPressed: (){\n            Navigator.pop(context);\n          },\n          child: new Text('返回'),\n        ),\n      ),\n    );\n  }\n}\n")])])]),n("p",[e._v("RaisedButton按钮组件\n它有两个最基本的属性：")]),e._v(" "),n("ul",[n("li",[e._v("child：可以放入容器，图标，文字。让你构建多彩的按钮。")]),e._v(" "),n("li",[e._v("onPressed：点击事件的相应，一般会调用Navigator组件。")])]),e._v(" "),n("p",[e._v("我们在作页面导航时，大量的使用了RaisedButton组件，这个组件的使用在实际工作中用的也比较多。")]),e._v(" "),n("p",[e._v("Navigator.push 和 Navigator.pop")]),e._v(" "),n("ul",[n("li",[e._v("Navigator.push：是跳转到下一个页面，它要接受两个参数一个是上下文context，另一个是要跳转的函数。")]),e._v(" "),n("li",[e._v("Navigator.pop：是返回到上一个页面，使用时传递一个context（上下文）参数，使用时要注意的是，你必须是有上级页面的，也就是说上级页面使用了Navigator.push。")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("import 'package:flutter/material.dart';\nclass Product {\n  final String title;\n  final String description;\n  Product(this.title, this.description);\n}\nvoid main() {\n  runApp(\n    MaterialApp(\n      title: '商品列表',\n      home: Home(\n        products: List.generate(\n          100, \n          (i)=> Product('商品$i','这是一个商品详情，编号为:$i')\n        )\n      )\n    )\n  );\n}\nclass Home extends StatelessWidget {\n  final  List<Product> products;\n  Home({Key key, this.products}) : super(key: key);\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: new Text('列表'),\n      ),\n      body: ListView.builder(\n        itemCount: products.length,\n        itemBuilder: (context, index){\n          return ListTile(title: Text(products[index].title+'  '+products[index].description),);\n        },\n      ),\n    );\n  }\n}\n")])])]),n("h4",{attrs:{id:"_7-导航参数的传递和接收"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-导航参数的传递和接收"}},[e._v("#")]),e._v(" 7. 导航参数的传递和接收")]),e._v(" "),n("p",[e._v("导航参数的传递")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Navigator.push(\n  context, \n  MaterialPageRoute(\n    builder:(context)=>new ProductDetail(product:products[index])\n  )\n);\n")])])]),n("p",[e._v("子页面接受参数并显示")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("class ProductDetail extends StatelessWidget {\n  final Product product;\n  ProductDetail({Key key ,@required this.product}):super(key:key);\n  @override\n  Widget build(BuildContext context) {\n    return new Scaffold(\n      appBar: AppBar(\n        title:Text('${product.title}'),\n      ),\n      body:Center(child: Text('${product.description}'),)\n    );\n  }\n}\n\n\nimport 'package:flutter/material.dart';\nclass Product {\n  final String title;\n  final String description;\n  Product(this.title, this.description);\n}\nvoid main() {\n  runApp(\n    MaterialApp(\n      title: '商品列表',\n      home: Home(\n        products: List.generate(\n          100, \n          (i)=> Product('商品$i','这是一个商品详情，编号为:$i')\n        )\n      )\n    )\n  );\n}\nclass Home extends StatelessWidget {\n  final  List<Product> products;\n  Home({Key key, this.products}) : super(key: key);\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: new Text('列表'),\n      ),\n      body: ListView.builder(\n        itemCount: products.length,\n        itemBuilder: (context, index){\n          return ListTile(\n            title: Text(products[index].title+'  '+products[index].description),\n            onTap: (){\n              Navigator.push(context, MaterialPageRoute(\n                builder: (context) {\n                  return new ProductDetail(product:products[index]);\n                }\n              ));\n            },\n          );\n        },\n      ),\n    );\n  }\n}\nclass ProductDetail extends StatelessWidget {\n  final Product product;\n  ProductDetail({Key key, this.product}):super(key: key);\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title:Text('${product.title}'),\n      ),\n      body: Center(\n        child: Text('${product.description}'),\n      ),\n    );\n  }\n}\n")])])]),n("h4",{attrs:{id:"_8-异步请求和等待"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8-异步请求和等待"}},[e._v("#")]),e._v(" 8. 异步请求和等待")]),e._v(" "),n("p",[e._v("直接使用async...await就可以实现")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("_navigateToXiaoJieJie(BuildContext context) async{ //async是启用异步方法\n    final result = await Navigator.push(//等待\n      context, \n      MaterialPageRoute(builder: (context)=> XiaoJieJie())\n      );\n      Scaffold.of(context).showSnackBar(SnackBar(content:Text('$result')));\n  }\n}\n")])])]),n("p",[e._v("SnackBar的使用")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Scaffold.of(context).showSnackBar(SnackBar(content:Text('$result')));\n")])])]),n("p",[e._v("返回数据的方式\nNavigator.pop(context,'xxxx');  //xxx就是返回的参数")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("import 'package:flutter/material.dart';\n\nvoid main(List<String> args) {\n  runApp(\n    MaterialApp(\n      title: \"数据传递\",\n      home: FirstPage()\n    )\n  );\n}\n\nclass FirstPage extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text('数据传递'),\n      ),\n      body: Center(\n        child: RouterButton(),\n      ),\n    );\n  }\n}\n\nclass RouterButton extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return RaisedButton(\n      child: Text('GO 数据传送'),\n      onPressed: (){\n        _navagatorTo(context);\n      },\n    );\n  }\n\n  _navagatorTo(BuildContext context) async{\n    final result = await Navigator.push(\n      context, \n      MaterialPageRoute(\n        builder: (context)=> secondPage()\n      )\n    );\n    Scaffold.of(context).showSnackBar(\n      SnackBar(content:Text('$result'))\n    );\n  }\n}\n\nclass secondPage extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text('第二个页面'),\n      ),\n      body: Center(\n        child: Column(\n          children: <Widget>[\n            RaisedButton(\n              child: Text('传送一个123'),\n              onPressed: (){\n                Navigator.pop(context, '123456');\n              },\n            ),\n            RaisedButton(\n              child: Text('传送一个456'),\n              onPressed: (){\n                Navigator.pop(context, '456789');\n              },\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n")])])]),n("ol",{attrs:{start:"9"}},[n("li",[e._v("静态资源和项目图片的处理\npubspec.yaml 文件\nassets:\n"),n("ul",[n("li",[e._v("images/blogtouxiang.jpg")])])])]),e._v(" "),n("p",[e._v("在项目根目录下新建了一个images文件夹\n使用项目图片资源\nimport 'package:flutter/material.dart';\nvoid main()=>runApp(MyApp());\nclass MyApp extends StatelessWidget {\n@override\nWidget build(BuildContext context) {\nreturn Container(\nchild: Image.asset('images/blogtouxiang.jpg'),\n);\n}\n}")]),e._v(" "),n("h4",{attrs:{id:"_10-配置app的图标"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_10-配置app的图标"}},[e._v("#")]),e._v(" 10. 配置APP的图标")]),e._v(" "),n("p",[e._v("项目根目录/android/app/src/main/res/")]),e._v(" "),n("ul",[n("li",[e._v("mdpi (中) ~160dpi")]),e._v(" "),n("li",[e._v("hdpi （高） ~240dip")]),e._v(" "),n("li",[e._v("xhdpi （超高） ~320dip")]),e._v(" "),n("li",[e._v("xxhdpi （超超高） ~480dip")]),e._v(" "),n("li",[e._v("xxxhdpi （超超超高） ~640dip")])]),e._v(" "),n("p",[e._v("AndroidManifest.xml 文件\n项目根目录/android/app/src/main/AndroidManifest.xml")]),e._v(" "),n("p",[e._v('android:label="flutter_app"   //配置APP的名称，支持中文\nandroid:icon="@mipmap/ic_launcher" //APP图标的文件名称')]),e._v(" "),n("h4",{attrs:{id:"_11-生成-keystore"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_11-生成-keystore"}},[e._v("#")]),e._v(" 11.生成 keystore")]),e._v(" "),n("p",[e._v("keytool -genkey -v -keystore ~/key.jks -keyalg RSA -keysize 2048 -validity 10000 -alias key")]),e._v(" "),n("p",[e._v("有了这个key.jks文件后，可以到项目目录下的android文件夹下，创建一个名为key.properties的文件，并打开粘贴下面的代码。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("storePassword=<password from previous step>    //输入上一步创建KEY时输入的 密钥库 密码\nkeyPassword=<password from previous step>    //输入上一步创建KEY时输入的 密钥 密码\nkeyAlias=key\nstoreFile=<E:/key.jks>    //key.jks的存放路径\n")])])]),n("p",[e._v("我的文件最后是这样的：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("storePassword=123123\nkeyPassword=123123\nkeyAlias=key\nstoreFile=/Users/mac/flutterKey.jks\n")])])]),n("h4",{attrs:{id:"_12-配置key注册"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_12-配置key注册"}},[e._v("#")]),e._v(" 12.配置key注册")]),e._v(" "),n("p",[e._v("key生成好后，需要在build.gradle文件中进行配置。这个过程其实很简单，就是粘贴复制一些东西，你是不需要知道这些文件的具体用处的。\n第一项：\n进入项目目录的/android/app/build.gradle文件，在android{这一行前面,加入如下代码：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("def keystorePropertiesFile = rootProject.file(\"key.properties\")\ndef keystoreProperties = new Properties()\nkeystoreProperties.load(new FileInputStream(keystorePropertiesFile))\n\n把如下代码进行替换\nbuildTypes {\n    release {\n        signingConfig signingConfigs.debug\n    }\n}\n\n替换成的代码：\nsigningConfigs {\n    release {\n        keyAlias keystoreProperties['keyAlias']\n        keyPassword keystoreProperties['keyPassword']\n        storeFile file(keystoreProperties['storeFile'])\n        storePassword keystoreProperties['storePassword']\n    }\n}\nbuildTypes {\n    release {\n        signingConfig signingConfigs.release\n    }\n}\n")])])]),n("h4",{attrs:{id:"_13-生成apk"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_13-生成apk"}},[e._v("#")]),e._v(" 13. 生成apk")]),e._v(" "),n("p",[e._v("直接在终端中输入：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("flutter build apk\n")])])]),n("p",[e._v("注意：密码输入的不能用空格查看signing-config.json这个文件")])])}),[],!1,null,null,null);t.default=s.exports}}]);