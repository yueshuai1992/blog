(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{218:function(t,n,e){"use strict";e.r(n);var r=e(28),o=Object(r.a)({},(function(){var t=this.$createElement,n=this._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[n("h3",{attrs:{id:"js-工厂模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#js-工厂模式"}},[this._v("#")]),this._v(" JS 工厂模式")]),this._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v("<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>简单工厂</title>\n</head>\n<body>\n\t<script>\n\t/*\n\t1.定义：简单工厂模式是由一个方法来决定到底要创建哪个类的实例, 而这些实例通常都拥有相同的接口（属性和方法）。\n\t2.什么时候使用工厂模式\n\t\t对象的构建十分复杂\n\t\t需要依赖具体环境创建不同实例\n\t\t处理大量具有相同属性的小对象\n\t */\n\t\t// 先创建各个角色的构造函数\n\t\tfunction  Warrior() {\n\t\t\tthis.skill = '回血';\n\t\t\tthis.blood = 150; // 初始化生命值\n\t\t\tthis.hit = 8; // 普通攻击伤害\n\t\t\t// 其他特有属性和方法比如生命值\n\t\t\tconsole.log(this);\n\t\t}\n\t\tfunction  Mage() {\n\t\t\tthis.skill = '冰冻';\n\t\t\tthis.blood = 120; // 初始化生命值\n\t\t\tthis.hit = 3; // 普通攻击伤害\n\t\t\t// 其他特有属性和方法\n\t\t\tconsole.log(this);\n\t\t}\n\t\tfunction  Archer() {\n\t\t\tthis.skill = '消耗';\n\t\t\tthis.blood = 110; // 初始化生命值\n\t\t\tthis.hit = 10; // 普通攻击伤害\n\t\t\t// 其他特有属性和方法\n\t\t\tconsole.log(this);\n\t\t}\n\n\n\t\t// 工厂对象 可以是普通对象的方法 和 构造函数，这里使用前者\n\t\tconst RoleFactory = {\n\t\t\tcreateRole (role) {\n\t\t\t\tlet roler;\n\t\t\t\tswitch (role) {\n\t\t\t\t\tcase '战士':\n\t\t\t\t\t\troler = new Warrior();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase '法师':\n\t\t\t\t\t\troler = new Mage();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase '射手':\n\t\t\t\t\t\troler = new Archer();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t// 后续扩展角色直接追加选择语句和添加角色构造函数\n\t\t\t\t\tdefaulr: \n\t\t\t\t\t\troler = new Warrior();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tObject.freeze(RoleFactory); // 冻结该对象，防止他人操作\n\t\t// 创建各个角色的实例\n\t\tvar warrior1 = RoleFactory.createRole('战士'); // 创建一个战士\n\t\tvar mage1 = RoleFactory.createRole('法师'); // 创建一个法师\n\t\tvar arche1 = RoleFactory.createRole('射手'); // 创建一个射手\n\t<\/script>\n</body>\n</html>\n")])])])])}),[],!1,null,null,null);n.default=o.exports}}]);