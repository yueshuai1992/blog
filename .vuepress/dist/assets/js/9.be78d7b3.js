(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{226:function(t,e,a){"use strict";a.r(e);var s=a(28),n=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h3",{attrs:{id:"egret-基础"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#egret-基础"}},[t._v("#")]),t._v(" Egret 基础")]),t._v(" "),a("ol",[a("li",[t._v("直接继承DisplayObject的类都属于非容器。")]),t._v(" "),a("li",[t._v("继承自DisplayObjectContainer的类都属于容器。")])]),t._v(" "),a("h4",{attrs:{id:"命令行"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#命令行"}},[t._v("#")]),t._v(" 命令行")]),t._v(" "),a("p",[t._v("egret create  project_name 创建项目")]),t._v(" "),a("p",[t._v("Egret create room-go  --type eui 创建eui项目")]),t._v(" "),a("p",[t._v("egret build 构建项目")]),t._v(" "),a("p",[t._v("egret startserver -a 启动服务（自动编译）")]),t._v(" "),a("p",[t._v("egret info 获取版本信息")]),t._v(" "),a("p",[t._v("egret publish 发布（生成bin-replease包）")]),t._v(" "),a("p",[t._v("egret publish --target wxgame 发布微信版本包")]),t._v(" "),a("h4",{attrs:{id:"打开性能面板"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#打开性能面板"}},[t._v("#")]),t._v(" 打开性能面板")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('data-show-fps="true" data-show-log="true"\n')])])]),a("ul",[a("li",[t._v("draw: 这里参数描述的是当前页面渲染时候drawcall的次数")]),t._v(" "),a("li",[t._v("cost：包含四个参数，EnterFrame阶段的开销，引擎updateTranform开销，引擎draw开销，html5 cavans开销")]),t._v(" "),a("li",[t._v("fps: 当前画面帧频")])]),t._v(" "),a("h4",{attrs:{id:"配置打开的容器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置打开的容器"}},[t._v("#")]),t._v(" 配置打开的容器")]),t._v(" "),a("p",[t._v("2.5之前配置egretProperties.json,在文件中使用")]),t._v(" "),a("p",[t._v('2.5之后设置 data-entry-class="Main"')]),t._v(" "),a("h4",{attrs:{id:"目录结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#目录结构"}},[t._v("#")]),t._v(" 目录结构")]),t._v(" "),a("ul",[a("li",[t._v("src 目录，存放我们的代码。我们编写的代码都放在src目录下面。")]),t._v(" "),a("li",[t._v("bin-debug 目录，项目编译和运行的debug目录，一般我们不要修改该目录下的内容。")]),t._v(" "),a("li",[t._v("libs 目录，这里面存放我们的库文件，包括 Egret 核心库和其他扩展库。当然以后添加了第三方库的话也会放在这里。")]),t._v(" "),a("li",[t._v("resource 目录，这里放置我们的资源文件，这里面有一个default.res.json 配置文件，用来配置资源。")]),t._v(" "),a("li",[t._v("template 目录，这里是项目调试过程中所需的目录，一般我们不需要修改该目录下的内容。")]),t._v(" "),a("li",[t._v("egretProperties.json 项目的配置文件，一般我们会用到里面的modules 字段来配置项目的模块。")]),t._v(" "),a("li",[t._v("index.html 项目访问的入口文件，我们可以在这里面配置项目的旋转缩放模式背景颜色等。")]),t._v(" "),a("li",[t._v("favicon.ico 一个ico。")])]),t._v(" "),a("h4",{attrs:{id:"index-html"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#index-html"}},[t._v("#")]),t._v(" index.html")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('<div style="margin: auto;width: 100%;height: 100%;" class="egret-player"\n     data-entry-class="Main"\n     data-orientation="auto"\n     data-scale-mode="showAll"\n     data-resolution-mode="retina"\n     data-frame-rate="30"\n     data-content-width="480"\n     data-content-height="800"\n     data-show-paint-rect="false"\n     data-multi-fingered="2"\n     data-show-fps="false" data-show-log="false"\n     data-log-filter="" data-show-fps-style="x:0,y:0,size:30,textColor:0x00c200,bgAlpha:0.9"> </div>\n')])])]),a("ul",[a("li",[t._v("data-entry-class=”Main” 设置项目的入口文件，表示项目的入口类，默认为Main,如果需要自定义的话需要在项目中先创建类，然后在这里配置类的名字。")]),t._v(" "),a("li",[t._v("data-orientation=”auto” 设置旋转模式。")]),t._v(" "),a("li",[t._v("data-scale-mode=”showAll” 设置缩放模式。")]),t._v(" "),a("li",[t._v("data-frame-rate=”30” 这里是运行的帧率。")]),t._v(" "),a("li",[t._v("data-content-width=”480” 和 data-content-height=”800” 用来设置舞台的设计宽和高")]),t._v(" "),a("li",[t._v("data-show-paint-rect=”false” 设置显示脏矩形的重绘区域。")]),t._v(" "),a("li",[t._v("data-multi-fingered=”2” 设置多指触摸")]),t._v(" "),a("li",[t._v("data-show-fps=”false” data-show-log=”false” 这里设置显示帧率和log，只有在调试时会显示，发布的版本会去掉。")]),t._v(" "),a("li",[t._v('data-log-filter=”” 设置一个正则表达式过滤条件，日志文本匹配这个正则表达式的时候才显示这条日志。如 data-log-filter="^egret" 表示仅显示以 egret 开头的日志。')]),t._v(" "),a("li",[t._v("data-show-fps-style=”x:0,y:0,size:30,textColor:0x00c200,bgAlpha:0.9” 这里设置fps面板的样式。目前支持默认的这几种设置，修改其值即可，比如修改面板位置可以设置x和y,改变大小可以设置size,改变文字颜色textColor，改变背景面板的透明度bgAlpha。")])]),t._v(" "),a("h4",{attrs:{id:"基本类结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本类结构"}},[t._v("#")]),t._v(" 基本类结构")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("class DisplayObject extends egret.DisplayObjectContainer {\n    constructor(parameters) {\n        super();\n        this.addEventListener(egret.Event.ADDED_TO_STAGE, this.onAddToStage, this);\n    }\n\n    private onAddToStage() {\n        // 实例化egret.Sprite()\n        let spr: egret.Sprite = new egret.Sprite();\n        // 设置填充颜色\n        spr.graphics.beginFill(0xff0000);\n        // 画正方形\n        spr.graphics.drawRect(100, 100, 200, 200);\n        // 绘画结束\n        spr.graphics.endFill();\n        spr.x = 100;\n        spr.y = 200;\n        this.addChild(spr);\n    }\n}\n")])])]),a("p",[a("code",[t._v("eg: spr.scaleX = 0.5;")])]),t._v(" "),a("ul",[a("li",[t._v("alpha：透明度")]),t._v(" "),a("li",[t._v("width：宽度")]),t._v(" "),a("li",[t._v("height：高度")]),t._v(" "),a("li",[t._v("rotation：旋转角度")]),t._v(" "),a("li",[t._v("scaleX：横向缩放")]),t._v(" "),a("li",[t._v("scaleY：纵向缩放")]),t._v(" "),a("li",[t._v("skewX：横向斜切")]),t._v(" "),a("li",[t._v("skewY：纵向斜切")]),t._v(" "),a("li",[t._v("visible：是否可见 // spr.visible = true|false;")]),t._v(" "),a("li",[t._v("x：X轴坐标值")]),t._v(" "),a("li",[t._v("y：Y轴坐标值")])]),t._v(" "),a("h4",{attrs:{id:"核心显示类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#核心显示类"}},[t._v("#")]),t._v(" 核心显示类")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("类")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("DisplayObject")]),t._v(" "),a("td",[t._v("显示对象基类，所有显示对象均继承自此类")])]),t._v(" "),a("tr",[a("td",[t._v("Bitmap")]),t._v(" "),a("td",[t._v("位图，用来显示图片")])]),t._v(" "),a("tr",[a("td",[t._v("Shape")]),t._v(" "),a("td",[t._v("用来显示矢量图，可以使用其中的方法绘制矢量图形")])]),t._v(" "),a("tr",[a("td",[t._v("DisplayObjectContainer")]),t._v(" "),a("td",[t._v("显示对象容器接口，所有显示对象容器均实现此接口")])]),t._v(" "),a("tr",[a("td",[t._v("Sprite")]),t._v(" "),a("td",[t._v("轻量级显示容器")])]),t._v(" "),a("tr",[a("td",[t._v("Stage")]),t._v(" "),a("td",[t._v("舞台类")])]),t._v(" "),a("tr",[a("td",[t._v("TextField")]),t._v(" "),a("td",[t._v("文本类")])]),t._v(" "),a("tr",[a("td",[t._v("TextInput")]),t._v(" "),a("td",[t._v("输入文本类")])])])]),t._v(" "),a("h4",{attrs:{id:"遮罩-mask"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#遮罩-mask"}},[t._v("#")]),t._v(" 遮罩 Mask")]),t._v(" "),a("p",[t._v("可以通过将一个显示对象用作遮罩来创建一个孔洞，透过该孔洞使另一个显示对象的内容可见。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("private onAddToStage() {\n    let shp: egret.Shape = new egret.Shape();\n    shp.graphics.beginFill(0xff00ff);\n    shp.graphics.drawRect(100, 100, 200, 200);\n    shp.graphics.endFill();\n    this.addChild(shp);\n    \n    let shp2: egret.Shape = new egret.Shape();\n    shp2.graphics.beginFill(0x00ff00);\n    shp2.graphics.drawCircle(0, 0, 50);\n    shp2.graphics.endFill();\n    shp2.x = 100;\n    shp2.y = 100;\n    this.addChild(shp2);\n    // 其左上角由 x 和 y 参数指定，并具有指定的 width 和 height 参数\n    let rect: egret.Rectangle = new egret.Rectangle(0, 0, 130, 150);\n    shp2.mask = rect; \n}\n")])])]),a("h4",{attrs:{id:"检查碰撞"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#检查碰撞"}},[t._v("#")]),t._v(" 检查碰撞")]),t._v(" "),a("p",[t._v("要测试的此对象的 x 坐标，要测试的此对象的 y 坐标，==true为检查对象，false为检查边框==")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("private onAddToStage() {\n    // 重绘过程\n    this.drawText();\n    let shap: egret.Shape = new egret.Shape();\n    shap.graphics.beginFill(0xf0f0f0);\n    shap.graphics.drawRect(30, 40, 100, 100);\n    shap.graphics.endFill();\n    this.addChild(shap);\n    /**\n     * @param x — 要测试的此对象的 x 坐标。\n     * @param y — 要测试的此对象的 y 坐标。\n     * @param shapeFlag — 是检查对象 (true) 的实际像素，还是检查边框 (false) 的实际像素。\n     */\n    let isHit: boolean = shap.hitTestPoint(20, 30);\n    this.info.text += isHit;\n}\n")])])]),a("h4",{attrs:{id:"自定义显示对象类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自定义显示对象类"}},[t._v("#")]),t._v(" 自定义显示对象类")]),t._v(" "),a("p",[t._v("自定义显示对象类需要继承DisplayObject的具体子类")]),t._v(" "),a("p",[a("strong",[t._v("MyGrid.ts")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("class MyGrid extends egret.Shape {\n    constructor() {\n        super();\n        this.drawGrid();\n    }\n    private drawGrid() {\n        this.graphics.beginFill(0xfff00);\n        this.graphics.drawRect(0, 0, 100, 100);\n        this.graphics.endFill();\n\n        this.graphics.beginFill(0x0f0f00);\n        this.graphics.drawRect(100, 0, 100, 100);\n        this.graphics.endFill();\n\n        this.graphics.beginFill(0x0f0f00);\n        this.graphics.drawRect(0, 100, 100, 100);\n        this.graphics.endFill();\n\n        this.graphics.beginFill(0xfff00);\n        this.graphics.drawRect(100, 100, 100, 100);\n        this.graphics.endFill();\n    }\n}\n")])])]),a("p",[a("strong",[t._v("Grid.ts")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("class Grid extends egret.DisplayObjectContainer {\n    constructor() {\n        super();\n        this.addEventListener(egret.Event.ADDED_TO_STAGE, this.onAddToStage, this);\n    }\n    \n    private onAddToStage() {\n        let g: MyGrid = new MyGrid();\n        this.addChild(g);\n    }\n}\n")])])]),a("h4",{attrs:{id:"锚点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#锚点"}},[t._v("#")]),t._v(" 锚点")]),t._v(" "),a("p",[t._v("每一个显示对象都包含一个锚点,该锚点默认位于显示对象的左上角。\n当设置一个显示对象的坐标位置时,我们会以锚点为参照改变显示对象绘图位置")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("class Anchor extends egret.DisplayObjectContainer {\n    constructor() {\n        super();\n        this.addEventListener(egret.Event.ADDED_TO_STAGE, this.onAddToStage, this);\n    }\n\n    private onAddToStage() {\n        let box: egret.Shape = new egret.Shape();\n        box.graphics.beginFill(0x423234);\n        box.graphics.drawRect(0, 0, 100, 100);\n        box.graphics.endFill();\n        box.x = 300;\n        box.y = 200;\n        this.addChild(box);\n\n        box.anchorOffsetX = 100;\n        box.anchorOffsetY = 60;\n    }\n}\n")])])]),a("h4",{attrs:{id:"显示容器的概念与实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#显示容器的概念与实现"}},[t._v("#")]),t._v(" 显示容器的概念与实现")]),t._v(" "),a("p",[t._v("DisplayObjectContainer 封装了一些显示列表中常用的功能。在后面的内容中，我们将详细介绍显示列表的操作。这些常用操作主要分为四类：")]),t._v(" "),a("ul",[a("li",[t._v("添加、删除子对象")]),t._v(" "),a("li",[t._v("访问子对象")]),t._v(" "),a("li",[t._v("检测子对象")]),t._v(" "),a("li",[t._v("设置叠放次序")])]),t._v(" "),a("p",[t._v("Sprite|轻量级显示容器")]),t._v(" "),a("p",[t._v("Sprite仅仅是继承 DisplayObjectContainer。同时添加了一个Graphics功能")]),t._v(" "),a("h4",{attrs:{id:"添加与删除显示对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#添加与删除显示对象"}},[t._v("#")]),t._v(" 添加与删除显示对象")]),t._v(" "),a("p",[t._v("在Egret中建立显示对象和渲染显示对象是两个过程。建立显示对象后,对象会处于内存中,但不会参与渲染过程,只有把显示对象放到显示列表后,显示对象才会参与渲染过程。如果想将某个显示对象从渲染过程中删除,只需要将其移除显示列表即可")]),t._v(" "),a("p",[t._v("顺序：")]),t._v(" "),a("ul",[a("li",[t._v("舞台（容器）\n"),a("ul",[a("li",[t._v("文档类（容器）\n"),a("ul",[a("li",[t._v("spr （容器）")])])])])])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("class AddView extends egret.DisplayObjectContainer {\n    constructor() {\n        super();\n        this.addEventListener(egret.Event.ADDED_TO_STAGE, this.onAddToStage, this);\n    }\n\n    private onAddToStage(event: egret.Event) {\n        let box: egret.Sprite = new egret.Sprite();\n        box.graphics.beginFill(0xff0000);\n        box.graphics.drawRect(0, 0, 200, 200);\n        box.graphics.endFill();\n        // 该对象存在\n        this.addChild(box);\n        // 参与添加渲染\n    }\n}\n")])])]),a("h5",{attrs:{id:"删除显示对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#删除显示对象"}},[t._v("#")]),t._v(" 删除显示对象")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("this.removeChild(box);\n")])])]),a("ul",[a("li",[t._v("显示对象独立于显示列表")]),t._v(" "),a("li",[t._v("相对坐标系")]),t._v(" "),a("li",[t._v("多次添加显示对象到显示列表")])]),t._v(" "),a("blockquote",[a("p",[t._v("同一个显示对象无论被代码加入显示列表多少次，在屏幕上只绘制一次。\n如果一个显示对象A被添加到了B这个容器中，然后A又被添加到了C容器中。那么在第二次执行 C.addChild(A) 的时候，A自动的从B容器中被删除，然后添加到C容器中。")])]),t._v(" "),a("ul",[a("li",[t._v("删除操作的注意点")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("if( spr.parent )\n{\n    spr.parent.removeChild( spr );\n}\n")])])]),a("h5",{attrs:{id:"深度管理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#深度管理"}},[t._v("#")]),t._v(" 深度管理")]),t._v(" "),a("p",[t._v("每一个容器都会有一个自己的深度管理功能，这个深度管理就好像我们排队一样")]),t._v(" "),a("ol",[a("li",[t._v("获取容器的数量")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("容器.numChildren\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[t._v("添加/删除指定深度的对象")])]),t._v(" "),a("p",[t._v("添加")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("容器.addChild(); // 在末尾添加\n容器.addChildAt( 显示对象, 深度值 ) // 在某个位置添加\n")])])]),a("p",[t._v("删除元素")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("容器.removeChildAt(0); // 删除某个位置的元素\n容器.removeChildren(); // 全部删除\n")])])]),a("ol",{attrs:{start:"3"}},[a("li",[t._v("交换不同深度对象")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("容器.swapChildren( 显示对象, 显示对象 ) // 交换对象1 和 对象2 的位置\n容器.swapChildrenAt( 深度值, 深度值 ) // 交换对象根据值\n")])])]),a("ol",{attrs:{start:"4"}},[a("li",[t._v("重设子对象深度")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("容器.setChildIndex( 显示对象, 新的深度值 );\n")])])]),a("h5",{attrs:{id:"访问容器子对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#访问容器子对象"}},[t._v("#")]),t._v(" 访问容器子对象")]),t._v(" "),a("p",[t._v("通过深度值获取子对象(推荐使用)")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("容器.getChildAt( 深度值 );\nlet _box: egret.DisplayObject = box.getChildAt(1);\n")])])]),a("p",[t._v("通过Name属性获取")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("容器.getChildAt(name)\nlet _box1: egret.DisplayObject = box.getChildByName('box1');\n")])])]),a("p",[t._v("eg:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("private onAddToStage() {\n    let box: egret.Sprite = new egret.Sprite();\n    this.addChild(box);\n\n    let box1: egret.Sprite = new egret.Sprite();\n    box1.graphics.beginFill(0xff00ff);\n    box1.graphics.drawRect(20, 20, 200, 200);\n    box1.graphics.endFill();\n    box1.name = 'box1';\n    box.addChild(box1);\n\n    let box2: egret.Sprite = new egret.Sprite();\n    box2.graphics.beginFill(0x00ffff);\n    box2.graphics.drawRect(20, 20, 200, 200);\n    box2.graphics.endFill();\n    box2.y = 300;\n    box.addChild(box2);\n\n    let _box2: egret.DisplayObject = box.getChildAt(1);\n    _box2.x = 300;\n    let _box1: egret.DisplayObject = box.getChildByName('box1');\n    _box1.x = 250;\n}\n")])])]),a("h4",{attrs:{id:"开启webgl渲染"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#开启webgl渲染"}},[t._v("#")]),t._v(" 开启webgl渲染")]),t._v(" "),a("p",[t._v("在index.html中")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('egret.runEgret({renderMode:"webgl"});\n')])])]),a("h4",{attrs:{id:"事件处理机制的原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事件处理机制的原理"}},[t._v("#")]),t._v(" 事件处理机制的原理")]),t._v(" "),a("p",[t._v("事件机制包含4个步骤：注册侦听器，发送事件，侦听事件，移除侦听器。这四个步骤是按照顺序来执行的。")]),t._v(" "),a("p",[t._v("自定义事件")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("/**\n * constructor\n * type指定我们事件的类型，在“约会”的例子中，我们的type事件类型为“DATE”。我们经常使用的事件类型有“ADDED”、“COMPLETE”等。\\\n * bubbles是指定事件是否参与事件流的冒泡阶段，关于事件流，会在后面的小节中介绍。\n * cancelable表示是否要取消Event对象。\n */\npublic constructor(type:string, bubbles:boolean=false, cancelable:boolean=false) {\n    super(type,bubbles,cancelable);\n}\n")])])]),a("p",[t._v("事件侦听器")]),t._v(" "),a("ul",[a("li",[t._v("ype表示事件类型。")]),t._v(" "),a("li",[t._v("listener就是用来处理事件的侦听器。")]),t._v(" "),a("li",[t._v("thisObject比较特殊，一般我们填写this。因为TypeScript与JavaScript的this作用域不同，其this指向也会不同")]),t._v(" "),a("li",[t._v("useCapture 事件冒泡、捕获")]),t._v(" "),a("li",[t._v("priority 该属性为一个number类型，当数字越大，则优先级越大")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("public addEventListener(type:string, listener:Function, thisObject:any, useCapture:boolean = false, priority:number = 0)\n")])])]),a("p",[t._v("注册侦听器")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("事件发送者.addEventListener(事件类型, 侦听器, this);\n")])])]),a("p",[t._v("移除侦听器")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("事件发送者.removeEventListener(事件类型, 侦听器, this);\n")])])]),a("p",[t._v("检测侦听器")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("事件发送者.hasEventListener(事件类型);\n")])])]),a("p",[t._v("TouchEvent的启动开关")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("显示对象实例.touchEnabled = false;\n")])])]),a("p",[t._v("触摸事件")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("box.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouch, this);\nthis.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTap, this);\n")])])]),a("p",[t._v("一个点击的流程一般会触发3个 touch 事件：TouchBegin 触摸开始，TouchEnd 触摸结束，TouchTap 点击。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('class TouchEventTest extends egret.DisplayObjectContainer {\n    private eventText: egret.TextField;\n\n    constructor() {\n        super();\n        this.addEventListener(egret.Event.ADDED_TO_STAGE, this.onAddToStage, this);\n    }\n\n    private onAddToStage(event: egret.Event) {\n        this.drawText();\n        let box: egret.Sprite = new egret.Sprite();\n        box.graphics.beginFill(0xff00ff);\n        box.graphics.drawRect(100, 100, 200, 200);\n        box.graphics.endFill();\n        this.addChild(box);\n\n        box.touchEnabled = true;\n        box.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouch, this);\n        this.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTap, this);\n        this.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTaps, this, true);\n    }\n\n    private onTouch() {\n        this.eventText.text += "\\n点击了box";\n    }\n\n    private onTouchTap() {\n        this.eventText.text += "\\n容器冒泡侦听\\n---------";\n    }\n\n    private onTouchTaps() {\n        this.eventText.text += "\\n容器捕获侦听\\n---------";\n    }\n\n    private drawText() {\n        this.eventText = new egret.TextField();\n        this.eventText.text = \'事件文字\'\n        this.eventText.size = 28;\n        this.eventText.textColor = 0x7722ff;\n        this.addChild(this.eventText);\n    }\n}\n')])])]),a("p",[t._v("Egret发布小游戏报错：p2 is not defined：\nhttps://xmanyou.com/egretfa-bu-xiao-you-xi-bao-cuo-p2-is-not-defined/\n白鹭H5游戏移植到微信小游戏笔记：\nhttps://xmanyou.com/egret-wxgame-migration/")])])}),[],!1,null,null,null);e.default=n.exports}}]);