(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{220:function(e,n,t){"use strict";t.r(n);var a=t(28),i=Object(a.a)({},(function(){var e=this.$createElement,n=this._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[n("h3",{attrs:{id:"js-享元模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#js-享元模式"}},[this._v("#")]),this._v(" JS 享元模式")]),this._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v('<!DOCTYPE html>\n<html lang="en">\n\n<head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <meta http-equiv="X-UA-Compatible" content="ie=edge">\n    <title>享元模式</title>\n</head>\n\n<body>\n    <script>\n        /* 定义：享元模式是一种用于性能优化的模式，如果系统中因为创建了大量类似的对象而导致内存不足或占用过高这种模式就非常有用了。\n                        使用场景：第一种是应用在数据层上，主要是应用在内存里大量相似的对象上；第二种是应用在DOM层上，\n                            享元可以用在中央事件管理器上用来避免给父容器里的每个子元素都附加事件句柄。\n                        作用：Flyweight中有两个重要概念--内部状态intrinsic和外部状态extrinsic之分，内部状态就是在对象里通过内部方法管理，\n                            而外部信息可以在通过外部删除或者保存。 */\n        /* 很显然，这里只需要两个对象便完成这个需求 */\n        // 定义塑料模特的构造函数\n        var Model = function(sex) {\n                this.sex = sex;\n            }\n            // 为模特拍照\n        Model.prototype.takePhoto = function() {\n            console.log(\'sex=\' + this.sex + \'underwear=\' + this.underwear)\n        }\n\n        // 实例化一个男模特 和 一个女模特\n        var maleModel = new Model(\'male\'),\n            female = new Model(\'female\');\n\n        for (var i = 0; i < 50; i++) {\n            maleModel.underwear = "underwear" + i;\n            maleModel.takePhoto();\n        }\n\n        for (var i = 0; i < 50; i++) {\n            female.underwear = "underwear" + i;\n            female.takePhoto();\n        }\n    <\/script>\n</body>\n\n</html>\n')])])])])}),[],!1,null,null,null);n.default=i.exports}}]);