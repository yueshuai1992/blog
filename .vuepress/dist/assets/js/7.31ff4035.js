(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{212:function(e,t,n){"use strict";n.r(t);var r=n(28),a=Object(r.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h3",{attrs:{id:"egret-动画和倒计时"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#egret-动画和倒计时"}},[e._v("#")]),e._v(" Egret 动画和倒计时")]),e._v(" "),n("h3",{attrs:{id:"tween缓动动画"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#tween缓动动画"}},[e._v("#")]),e._v(" Tween缓动动画")]),e._v(" "),n("p",[e._v("动画示例地址：\nhttp://edn.egret.com/cn/article/index/id/53")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('class MyTweenAnim extends egret.DisplayObjectContainer {\n    constructor() {\n        super();\n        this.addEventListener(egret.Event.ADDED_TO_STAGE, this.onAddToStage, this);\n    }\n    private onAddToStage() {\n        let box: egret.Shape = new egret.Shape();\n        box.graphics.beginFill(0xff00ff);\n        box.graphics.drawCircle(50, 50, 50);\n        box.graphics.endFill();\n        this.addChild(box);\n\n        let tw = egret.Tween.get(box,{loop: true});\n        tw.to( {x:250}, 500, egret.Ease.getElasticIn ).call( function(){ console.log( "右上角" ) } ).wait( 100 )\n        .to( {y:250}, 500 ).call( function(){ console.log( "右下角" ) } ).wait( 100 )\n        .to( {x:50}, 500 ).call( function(){ console.log( "左下角" ) } ).wait( 100 )\n        .to( {y:50}, 500 ).call( function(){ console.log( "左上角" ) } ).wait( 100 );\n    }\n}\n')])])]),n("ul",[n("li",[e._v("Tween.get 的第二个参数是可选的，这是一个对象参数，支持的属性有两个")]),e._v(" "),n("li",[e._v("loop 布尔值，用于指定是否循环该缓动定义。true 为循环， false 为不循环，默认是不循环 (false) 。")]),e._v(" "),n("li",[e._v("call 在某个缓动过程结束时，可以用 call 产生一个回调，直接将回调函数作为参数传给call就可以了。")]),e._v(" "),n("li",[e._v("wait 用于多个缓动连续设定中设置中间的等待时间，也是以毫秒为单位。")])]),e._v(" "),n("h3",{attrs:{id:"timer"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#timer"}},[e._v("#")]),e._v(" timer")]),e._v(" "),n("ul",[n("li",[e._v("2个属性: delay(每次间隔的时间),repeatCount(执行的次数)")]),e._v(" "),n("li",[e._v("3个方法: start 开始 reset 重置 stop 停止")]),e._v(" "),n("li",[e._v("2个事件: TimerEvent.TIMER 计时过程中触发 TimerEvent.TIMER_COMPLETE 计时结束后触发")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('class MyTimer extends egret.DisplayObjectContainer {\n    constructor() {\n        super();\n        this.addEventListener(egret.Event.ADDED_TO_STAGE, this.onAddToStage, this);\n    }\n    /**\n     * 1. 2个属性: delay(每次间隔的时间),repeatCount(执行的次数)\n     * 2. 3个方法: start 开始 reset 重置 stop 停止\n     * 3. 2个事件: TimerEvent.TIMER 计时过程中触发 TimerEvent.TIMER_COMPLETE 计时结束后触发\n     */\n    private onAddToStage(event: egret.Event) {\n        let timer: egret.Timer = new egret.Timer(1000, 5);\n        timer.addEventListener(egret.TimerEvent.TIMER, this.timerfun, this);\n        timer.addEventListener(egret.TimerEvent.TIMER_COMPLETE, this.timerComfun, this);\n        timer.start();\n    }\n\n    private timerfun() {\n        console.log("计时")\n        console.log(new Date().getTime())\n    }\n\n    private timerComfun() {\n        console.log("计时结束")\n    }\n}\n')])])])])}),[],!1,null,null,null);t.default=a.exports}}]);