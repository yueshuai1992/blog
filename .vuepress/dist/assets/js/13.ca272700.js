(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{221:function(t,e,n){"use strict";n.r(e);var a=n(28),i=Object(a.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h3",{attrs:{id:"flutter-基础（一）"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#flutter-基础（一）"}},[t._v("#")]),t._v(" Flutter 基础（一）")]),t._v(" "),n("h4",{attrs:{id:"_1-地址"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-地址"}},[t._v("#")]),t._v(" 1. 地址")]),t._v(" "),n("ul",[n("li",[t._v("https://github.com/kangshaojun")]),t._v(" "),n("li",[t._v("https://www.jianshu.com/p/cda416e2fc0d")]),t._v(" "),n("li",[t._v("https://www.jianshu.com/p/b50a92afbef1")])]),t._v(" "),n("h4",{attrs:{id:"_2-lib-main-bat"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-lib-main-bat"}},[t._v("#")]),t._v(" 2. lib/main.bat")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("import 'package:flutter/material.dart';\n\n//主函数（入口函数），下面我会简单说说Dart的函数\nvoid main() =>runApp(MyApp());\n// 声明MyApp类\nclass MyApp extends StatelessWidget{\n  //重写build方法\n  @override\n  Widget build(BuildContext context){\n    //返回一个Material风格的组件\n   return MaterialApp(\n      title:'Welcome to Flutteraa',\n      home:Scaffold(\n        //创建一个Bar，并添加文本\n        appBar:AppBar(\n          title:Text('Welcome to Flutter'),\n        ),\n        //在主体的中间区域，添加一个hello world 的文本\n        body:Center(\n          child:Text('Hello World'),\n        ),\n      ),\n    );\n  }\n}\n")])])]),n("ul",[n("li",[t._v("r 键：点击后热加载，也就算是重新加载吧。")]),t._v(" "),n("li",[t._v("p 键：显示网格，这个可以很好的掌握布局情况，工作中很有用。")]),t._v(" "),n("li",[t._v("o 键：切换android和ios的预览模式。")]),t._v(" "),n("li",[t._v("q 键：退出调试预览模式。")])]),t._v(" "),n("h4",{attrs:{id:"_3-textalign属性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-textalign属性"}},[t._v("#")]),t._v(" 3. TextAlign属性")]),t._v(" "),n("p",[t._v("TextAlign属性就是文本的对齐方式，它的属性值有如下几个（详细请看视频中讲解）：")]),t._v(" "),n("ul",[n("li",[t._v("center: 文本以居中形式对齐,这个也算比较常用的了。")]),t._v(" "),n("li",[t._v("left:左对齐，经常使用，让文本居左进行对齐，效果和start一样。")]),t._v(" "),n("li",[t._v("right :右对齐，使用频率也不算高。")]),t._v(" "),n("li",[t._v("start:以开始位置进行对齐，类似于左对齐。")]),t._v(" "),n("li",[t._v("end: 以为本结尾处进行对齐，不常用。有点类似右对齐.")])]),t._v(" "),n("p",[t._v("总结起来，也就算三个对齐方式，left(左对齐)、center（居中对齐）、right（右对齐）。我们来看一下具体代码：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("child:Text(\n  'Hello JSPang  ,非常喜欢前端，并且愿意为此奋斗一生。我希望可以出1000集免费教程。',\n  textAlign:TextAlign.left,\n)\n")])])]),n("h4",{attrs:{id:"_4-maxlines属性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-maxlines属性"}},[t._v("#")]),t._v(" 4. maxLines属性")]),t._v(" "),n("p",[t._v("设置最多显示的行数，比如我们现在只显示1行，类似一个新闻列表的题目。代码如下：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("child:Text(\n  'Hello JSPang  ,非常喜欢前端，并且愿意为此奋斗一生。我希望可以出1000集免费教程。',\n  textAlign:TextAlign.left,\n  maxLines: 1,\n)\n")])])]),n("p",[t._v("设置好后，文字只能显示出1行了。")]),t._v(" "),n("h4",{attrs:{id:"_5-overflow属性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-overflow属性"}},[t._v("#")]),t._v(" 5. overflow属性")]),t._v(" "),n("ul",[n("li",[t._v("overflow属性是用来设置文本溢出时，如何处理,它有下面几个常用的值供我们选择。")]),t._v(" "),n("li",[t._v("clip：直接切断，剩下的文字就没有了，感觉不太友好，体验性不好。")]),t._v(" "),n("li",[t._v("ellipsis:在后边显示省略号，体验性较好，这个在工作中经常使用。")]),t._v(" "),n("li",[t._v("fade: 溢出的部分会进行一个渐变消失的效果，当然是上线的渐变，不是左右的哦。")])]),t._v(" "),n("h4",{attrs:{id:"_6-style属性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-style属性"}},[t._v("#")]),t._v(" 6. style属性")]),t._v(" "),n("p",[t._v("https://docs.flutter.io/flutter/painting/TextStyle-class.html")]),t._v(" "),n("h4",{attrs:{id:"_7-alignment属性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-alignment属性"}},[t._v("#")]),t._v(" 7. alignment属性")]),t._v(" "),n("ul",[n("li",[t._v("bottomCenter:下部居中对齐。")]),t._v(" "),n("li",[t._v("botomLeft: 下部左对齐。")]),t._v(" "),n("li",[t._v("bottomRight：下部右对齐。")]),t._v(" "),n("li",[t._v("center：纵横双向居中对齐。")]),t._v(" "),n("li",[t._v("centerLeft：纵向居中横向居左对齐。")]),t._v(" "),n("li",[t._v("centerRight：纵向居中横向居右对齐。")]),t._v(" "),n("li",[t._v("topLeft：顶部左侧对齐。")]),t._v(" "),n("li",[t._v("topCenter：顶部居中对齐。")]),t._v(" "),n("li",[t._v("topRight： 顶部居左对齐。")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("import 'package:flutter/material.dart';\nvoid main () => runApp(MyApp());\nclass MyApp extends StatelessWidget{\n  @override\n  Widget build(BuildContext context ){\n      return MaterialApp(\n        title:'Text widget',\n        home:Scaffold(\n          body:Center(\n           child:Container(\n             child:new Text('Hello JSPang',style: TextStyle(fontSize: 40.0),),\n             alignment: Alignment.center,\n           ),\n          ),\n        ),\n      );\n  }\n}\n")])])]),n("p",[t._v("设置宽、高和颜色属性\n设置宽、高和颜色属性是相对容易的，只要在属性名称后面加入浮点型数字就可以了，比如要设置宽是500，高是400，颜色为亮蓝色。代码如下：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("child:Container(\n  child:new Text('Hello JSPang',style: TextStyle(fontSize: 40.0),),\n  alignment: Alignment.center,\n  width:500.0,\n  height:400.0,\n  color: Colors.lightBlue,\n),\n")])])]),n("h4",{attrs:{id:"_8-padding属性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8-padding属性"}},[t._v("#")]),t._v(" 8. padding属性")]),t._v(" "),n("p",[t._v("padding的属性就是一个内边距，它和你使用的前端技术CSS里的padding表现形式一样，指的是Container边缘和child内容的距离。先来看一个内边距为10的例子。具体代码如下(我们还是接着上节课的代码来写)：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("child:Container(\n  child:new Text('Hello JSPang',style: TextStyle(fontSize: 40.0),),\n  alignment: Alignment.topLeft,\n  width:500.0,\n  height:400.0,\n  color: Colors.lightBlue,\n  padding:const EdgeInsets.all(10.0),\n),\n\n\npadding:const EdgeInsets.all(10.0),\n")])])]),n("p",[t._v("这句的意思是设置Container的内边距是10，左右上下全部为10，这看起来非常容易。那我们再加大一点难度。如果上边距为30，左边距为10，这时候EdgeInsets.all()就满足不了我们了。\nEdgeInsets.fromLTRB(value1,value2,value3,value4)")]),t._v(" "),n("p",[t._v("我们用EdgeInsets.fromLTRB(value1,value2,value3,value4) 可以满足我们的需求，LTRB分别代表左、上、右、下。\n那我们设置上边距为30，左边距为10，就可以用下面的代码来编写。\npadding:const EdgeInsets.fromLTRB(10.0,30.0,0.0,0.0),")]),t._v(" "),n("h4",{attrs:{id:"_9-margin属性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_9-margin属性"}},[t._v("#")]),t._v(" 9. margin属性")]),t._v(" "),n("p",[t._v("会了padding属性的设置，margin就变的非常容易了，因为方法基本上一样。不过margin是外边距，只的是container和外部元素的距离。\n现在要把container的外边距设置为10个单位，代码如下:")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("child:Container(\n  child:new Text('Hello JSPang',style: TextStyle(fontSize: 40.0),),\n  alignment: Alignment.topLeft,\n  width:500.0,\n  height:400.0,\n  color: Colors.lightBlue,\n  padding:const EdgeInsets.fromLTRB(10.0,30.0,0.0,0.0),\n  margin: const EdgeInsets.all(10.0),\n),\n")])])]),n("h4",{attrs:{id:"_10-decoration属性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_10-decoration属性"}},[t._v("#")]),t._v(" 10. decoration属性")]),t._v(" "),n("p",[t._v("decoration是 container 的修饰器，主要的功能是设置背景和边框。\n比如你需要给背景加入一个渐变，这时候需要使用BoxDecoration这个类，代码如下（需要注意的是如果你设置了decoration，就不要再设置color属性了，因为这样会冲突）。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("child:Container(\n  child:new Text('Hello JSPang',style: TextStyle(fontSize: 40.0),),\n  alignment: Alignment.topLeft,\n  width:500.0,\n  height:400.0,\n  padding:const EdgeInsets.fromLTRB(10.0,30.0,0.0,0.0),\n  margin: const EdgeInsets.all(10.0),\n  decoration:new BoxDecoration(\n    gradient:const LinearGradient(\n      colors:[Colors.lightBlue,Colors.greenAccent,Colors.purple]\n    ),\n    border: Border.all(width: 5.0, color: Colors.red)\n  ),\n),\n")])])]),n("p",[t._v("上面的代码去掉了color的设置，这时候container的背景就变成了渐变颜色\nborder:Border.all(width:2.0,color:Colors.red)")]),t._v(" "),n("h4",{attrs:{id:"_11-image图片组件的使用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_11-image图片组件的使用"}},[t._v("#")]),t._v(" 11. Image图片组件的使用")]),t._v(" "),n("ul",[n("li",[t._v("Image.asset:加载资源图片，就是加载项目资源目录中的图片,加入图片后会增大打包的包体体积，用的是相对路径。")]),t._v(" "),n("li",[t._v("Image.network:网络资源图片，意思就是你需要加入一段http://xxxx.xxx的这样的网络路径地址。")]),t._v(" "),n("li",[t._v("Image.file:加载本地图片，就是加载本地文件中的图片，这个是一个绝对路径，跟包体无关。")]),t._v(" "),n("li",[t._v("Image.memory: 加载Uint8List资源图片,这个我目前用的不是很多，所以没什么发言权。")])]),t._v(" "),n("h4",{attrs:{id:"_12-fit属性的设置"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_12-fit属性的设置"}},[t._v("#")]),t._v(" 12. fit属性的设置")]),t._v(" "),n("ul",[n("li",[t._v("BoxFit.fill:全图显示，图片会被拉伸，并充满父容器。")]),t._v(" "),n("li",[t._v("BoxFit.contain:全图显示，显示原比例，可能会有空隙。")]),t._v(" "),n("li",[t._v("BoxFit.cover：显示可能拉伸，可能裁切，充满（图片要充满整个容器，还不变形）。")]),t._v(" "),n("li",[t._v("BoxFit.fitWidth：宽度充满（横向充满），显示可能拉伸，可能裁切。")]),t._v(" "),n("li",[t._v("BoxFit.fitHeight ：高度充满（竖向充满）,显示可能拉伸，可能裁切。")]),t._v(" "),n("li",[t._v("BoxFit.scaleDown：效果和contain差不多，但是此属性不允许显示超过源图片大小，可小不可大。")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("child:new Image.network(\n  'https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=653666270,723497068&fm=26&gp=0.jpg',\n  scale:2.0,\n  fit: BoxFit.cover,\n),\n")])])]),n("h4",{attrs:{id:"_13-图片的混合模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_13-图片的混合模式"}},[t._v("#")]),t._v(" 13. 图片的混合模式")]),t._v(" "),n("p",[t._v("图片混合模式（colorBlendMode）和color属性配合使用，能让图片改变颜色，里边的模式非常的多，产生的效果也是非常丰富的。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("child:new Image.network(\n  'http://jspang.com/static/myimg/blogtouxiang.jpg',\n    color: Colors.greenAccent,\n    colorBlendMode: BlendMode.darken,\n),\n")])])]),n("ul",[n("li",[t._v("color：是要混合的颜色，如果你只设置color是没有意义的。")]),t._v(" "),n("li",[t._v("colorBlendMode:是混合模式，相当于我们如何混合。")])]),t._v(" "),n("h4",{attrs:{id:"_14-repeat图片重复"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_14-repeat图片重复"}},[t._v("#")]),t._v(" 14. repeat图片重复")]),t._v(" "),n("ul",[n("li",[t._v("ImageRepeat.repeat : 横向和纵向都进行重复，直到铺满整个画布。")]),t._v(" "),n("li",[t._v("ImageRepeat.repeatX: 横向重复，纵向不重复。")]),t._v(" "),n("li",[t._v("ImageRepeat.repeatY：纵向重复，横向不重复。\n来个全部重复的代码。")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("child:new Image.network(\n  'http://jspang.com/static/myimg/blogtouxiang.jpg',\n   repeat: ImageRepeat.repeat,\n),\n")])])]),n("h4",{attrs:{id:"_15-listview的声明"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_15-listview的声明"}},[t._v("#")]),t._v(" 15. ListView的声明")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("body: new ListView(\n  children:<Widget>[\n    new ListTile(\n      leading:new Icon(Icons.access_time),\n      title:new Text('access_time')\n    )\n  ]\n),\n")])])]),n("h4",{attrs:{id:"_16-图片列表的使用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_16-图片列表的使用"}},[t._v("#")]),t._v(" 16. 图片列表的使用")]),t._v(" "),n("p",[t._v("上节课学习了Image Widget，在这里我们就在列表中加入图片来试一下。我们插入4幅图片，然后看一下效果，代码如下：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("body: new ListView(\n  children:<Widget>[\n   new Image.network(\n       'http://jspang.com/static/upload/20181111/G-wj-ZQuocWlYOHM6MT2Hbh5.jpg'\n   ),\n   new Image.network(\n       'http://jspang.com/static/upload/20181109/1bHNoNGpZjyriCNcvqdKo3s6.jpg'\n   ),\n  ]\n),\n")])])]),n("h4",{attrs:{id:"_17-制作横向列表"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_17-制作横向列表"}},[t._v("#")]),t._v(" 17. 制作横向列表")]),t._v(" "),n("p",[t._v("这个我们先来看效果，然后再具体讲解使用方法:")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("import 'package:flutter/material.dart';\nvoid main () => runApp(MyApp());\nclass MyApp extends StatelessWidget{\n  @override\n  Widget build(BuildContext context ){\n      return MaterialApp(\n        title:'Text widget',\n        home:Scaffold(\n          body:Center(\n          child:Container(\n            height:200.0,\n            child:new ListView(\n              scrollDirection: Axis.horizontal,\n              children: <Widget>[\n                new Container(\n                  width:180.0,\n                  color: Colors.lightBlue,\n                ), new Container(\n                  width:180.0,\n                  color: Colors.amber,\n                ), new Container(\n                  width:180.0,\n                  color: Colors.deepOrange,\n                ),new Container(\n                  width:180.0,\n                  color: Colors.deepPurpleAccent,\n                ),\n              ],\n            )\n          ),\n          ),\n        ),\n      );\n  }\n}\n")])])]),n("p",[t._v("我们先是加入了Center组件，作用是让我们的横向列表可以居中到屏幕的中间位置，然后在center组件的下面加入了Container容器组件，并设置了容器组件的高是200，在容器组件里我们加入了ListView组件，然后设置了组件的scrollDirection属性\nscrollDirection属性")]),t._v(" "),n("ul",[n("li",[t._v("ListView组件的scrollDirection属性只有两个值，一个是横向滚动，一个是纵向滚动。默认的就是垂直滚动，所以如果是垂直滚动，我们一般都不进行设置。")]),t._v(" "),n("li",[t._v("Axis.horizontal:横向滚动或者叫水平方向滚动。")]),t._v(" "),n("li",[t._v("Axis.vertical:纵向滚动或者叫垂直方向滚动。")])]),t._v(" "),n("h4",{attrs:{id:"_18-dart-list类型的使用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_18-dart-list类型的使用"}},[t._v("#")]),t._v(" 18. Dart List类型的使用")]),t._v(" "),n("p",[t._v("List是Dart的集合类型之一,其实你可以把它简单理解为数组（反正我是这么认为的），其他语言也都有这个类型。它的声明有几种方式：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("var myList = List(): 非固定长度的声明。\nvar myList = List(2): 固定长度的声明。\nvar myList= List<String>():固定类型的声明方式。\nvar myList = [1,2,3]: 对List直接赋值。\n")])])]),n("p",[t._v("那我们这里使用的是一个List传递，然后直接用List中的generate方法进行生产List里的元素。最后的结果是生产了一个带值的List变量。代码如下：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('void main () => runApp(MyApp(\n  items: new List<String>.generate(1000, (i)=> "Item $i")\n));\n')])])]),n("p",[t._v("说明:再main函数的runApp中调用了MyApp类，再使用类的使用传递了一个items参数,并使用generate生成器对items进行赋值。\ngenerate方法传递两个参数，第一个参数是生成的个数，第二个是方法。\n接受参数\n我们已经传递了参数，那MyApp这个类是需要接收的。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("final List<String> items;\n MyApp({Key key, @required this.items}):super(key:key);\n")])])]),n("p",[t._v("这是一个构造函数，除了Key，我们增加了一个必传参数，这里的@required意思就必传。:super如果父类没有无名无参数的默认构造函数，则子类必须手动调用一个父类构造函数。\n这样我们就可以接收一个传递过来的参数了，当然我们要事先进行声明。\n动态列表 ListView.builder()")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("import 'package:flutter/material.dart';\nvoid main () => runApp(MyApp(\n  items: new List<String>.generate(1000, (i)=> \"Item $i\")\n));\nclass MyApp extends StatelessWidget{\n  final List<String> items;\n  MyApp({Key key, @required this.items}):super(key:key);\n  @override\n  Widget build(BuildContext context ){\n      return MaterialApp(\n        title:'ListView widget',\n        home:Scaffold(\n          body:new ListView.builder(\n            itemCount:items.length,\n            itemBuilder:(context,index){\n              return new ListTile(\n                title:new Text('${items[index]}'),\n              );\n            }\n          )\n        ),\n      );\n  }\n}\n")])])]),n("p",[t._v("GridView网格列表组件")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("body: GridView.count(\n    padding: const EdgeInsets.all(20.0),\n    crossAxisCount: 3,\n    crossAxisSpacing: 10.0,\n    children: <Widget>[\n      const Text('I am Jamse'),\n      const Text('I love WEB'),\n      const Text('JavaScript'),\n      const Text('Dart'),\n      const Text('Flutter')\n    ],\n)\n")])])]),n("ul",[n("li",[t._v("padding:表示内边距，这个小伙伴们应该很熟悉。")]),t._v(" "),n("li",[t._v("crossAxisSpacing:网格间的空当，相当于每个网格之间的间距。")]),t._v(" "),n("li",[t._v("crossAxisCount:网格的列数，相当于一行放置的网格数量。")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("body: GridView.count(\n    padding: const EdgeInsets.all(20.0),\n    crossAxisCount: 3,\n    crossAxisSpacing: 10.0,\n    mainAxisSpacing: 10.0,\n    childAspectRatio: 0.7,\n    children: <Widget>[\n      new Image.network('http://img5.mtime.cn/mt/2018/10/22/104316.77318635_180X260X4.jpg',fit: BoxFit.cover),\n      new Image.network('http://img5.mtime.cn/mt/2018/10/10/112514.30587089_180X260X4.jpg',fit: BoxFit.cover),\n      new Image.network('http://img5.mtime.cn/mt/2018/11/13/093605.61422332_180X260X4.jpg',fit: BoxFit.cover),\n      new Image.network('http://img5.mtime.cn/mt/2018/11/07/092515.55805319_180X260X4.jpg',fit: BoxFit.cover),\n      new Image.network('http://img5.mtime.cn/mt/2018/11/21/090246.16772408_135X190X4.jpg',fit: BoxFit.cover),\n      new Image.network('http://img5.mtime.cn/mt/2018/11/17/162028.94879602_135X190X4.jpg',fit: BoxFit.cover),\n      new Image.network('http://img5.mtime.cn/mt/2018/11/19/165350.52237320_135X190X4.jpg',fit: BoxFit.cover),\n      new Image.network('http://img5.mtime.cn/mt/2018/11/16/115256.24365160_180X260X4.jpg',fit: BoxFit.cover),\n      new Image.network('http://img5.mtime.cn/mt/2018/11/20/141608.71613590_135X190X4.jpg',fit: BoxFit.cover)\n    ],\n)\n")])])]),n("p",[t._v("childAspectRatio:宽高比，这个值的意思是宽是高的多少倍，如果宽是高的2倍，那我们就写2.0，如果高是宽的2倍，我们就写0.5。")])])}),[],!1,null,null,null);e.default=i.exports}}]);